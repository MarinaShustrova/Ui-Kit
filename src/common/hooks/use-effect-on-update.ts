import { DependencyList, EffectCallback, useEffect } from 'react'
import { useCheckFirstRender } from './use-check-first-render'

/**
 * Хук useEffectOnUpdate позволяет запускать эффект только при
 * обновлении компонента, пропуская его выполнение во время
 * первого рендера. Это полезно в случаях, когда нужно
 * избежать выполнения определенных действий (например,
 * сеттеров состояния или запросов к API) при первом рендере,
 * но выполнить их на последующих рендерах.
 *
 * Как это работает:
 * - Хук использует `useCheckFirstRender`, чтобы определить,
 * является ли текущий рендер первым.
 * - Внутри `useEffect` проверяется, является ли `isFirstRender`
 * `false`. Если это так, вызывается переданный в хук
 * `effect`, который будет выполнен на каждом обновлении
 * компонента, кроме первого.
 * - `dependencies` позволяют управлять тем, когда эффект
 * должен повторно выполняться. Если не переданы, эффект
 * будет вызываться при каждом обновлении компонента.
 *
 * Этот хук идеально подходит для ситуаций, когда необходимо
 * запускать эффект, основанный на изменениях состояния или
 * пропсов, но не нужно запускать его при первом рендере
 * компонента.
 *
 * @param effect - функция эффекта, которая будет вызвана
 * при обновлении компонента.
 * @param dependencies - массив зависимостей, который управляет
 * тем, когда эффект будет повторно выполняться.
 */
export const useEffectOnUpdate = (effect: EffectCallback, dependencies?: DependencyList) => {
    const isFirstRender = useCheckFirstRender()

    useEffect(() => {
        if (!isFirstRender) {
            return effect()
        }
    }, dependencies)
}
