import { SIZES } from './constants'

type Values<T> = T[keyof T]
type SwitchSize = Values<typeof SIZES>

export type SwitchChangeEventData = {
    /**
     * Значение, ассоциированное с переключателем.
     *
     * Определяет значение, передаваемое при изменении состояния переключателя.
     */
    value: string
    /**
     * Состояние переключателя.
     *
     * Указывает, включен ли переключатель в текущий момент.
     */
    checked: boolean
}

export type SwitchProps = {
    /**
     * Начальное состояние переключателя.
     *
     * Определяет, включен ли переключатель при первой загрузке компонента.
     */
    initialState?: 'enabled' | 'disabled'
    /**
     * Уникальный идентификатор переключателя.
     *
     * Используется для связывания с другими элементами и управления доступностью.
     */
    id?: string
    /**
     * Имя переключателя для группировки и идентификации.
     *
     * Полезно при использовании в формах или для группировки переключателей.
     */
    name?: string
    /**
     * Размер переключателя.
     *
     * Определяет габариты переключателя, выбираемые из предопределенных значений в `SIZES`.
     */
    size?: SwitchSize
    /**
     * Текст лейбла, отображаемый рядом с переключателем.
     *
     * Используется для обозначения назначения переключателя.
     */
    label?: string
    /**
     * Состояние выбора переключателя.
     *
     * Указывает, включен ли переключатель в данный момент.
     */
    checked?: boolean
    /**
     * Отключение переключателя.
     *
     * Делает переключатель неактивным и недоступным для взаимодействия.
     */
    disabled?: boolean
    /**
     * Функция, вызываемая при изменении состояния переключателя.
     *
     * Вызывается при изменении состояния переключателя и передает событие
     * и данные о текущем состоянии переключателя.
     */
    onChange?: (
        event: React.ChangeEvent<HTMLInputElement>,
        data: { value: string; checked: boolean },
    ) => void
    /**
     * Кастомный CSS-класс для стилизации.
     *
     * Позволяет добавить дополнительные стили через пользовательский CSS-класс.
     */
    className?: string
    /**
     * Значение переключателя.
     *
     * Определяет значение, передаваемое в форму при отправке.
     */
    value?: string
}
